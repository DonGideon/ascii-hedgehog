== Instructions:

The following exercise contains two user stories for you to implement (and a third one that you shouldn't worry about for now). Each user story relies on the previous one. Your goal is to have a working program in the language of your choice that implements these use cases.

You can assume the input is valid. You don't need to handle unexpected characters or invalid spacing in the input file.

Guidelines:

At Klarna we value clean code and good object oriented design.

By clean code we mean:

* Concise and descriptive variable and method names.
* Good use of the programming language.
* Easy to read.
* Tested (we're talking actual tests written using a testing framework of your choice).
* a README (run/compile instructions)

By good design we mean:

* Object oriented design principles. ( e.g. SOLID)
* Good separation of concerns.
* A simple, practical solution.
* Mostly, we are interested in code that makes you proud.

User Story 1 - Parse invoice numbers

We have recently decided to digitize our old invoice archives. Since finding a volunteer for such an arduous task was impossible, an employee was selected at random and instructed to type in all invoice numbers into a text file.

Little did we know that the employee we picked is an aspiring ASCII artist. Instead of handing us a file containing a set of numbers, we ended up with 7-segment display representations of the invoice numbers.

This is where you come in. Write a program that given an input text file of 7-segment invoice numbers, outputs a text file with the parsed invoice numbers.

Input:

A text file containing several hundreds of invoice numbers in the following form:

      _  _     _  _  _  _  _  (line 1)
    | _| _||_||_ |_   ||_||_| (line 2)
    ||_  _|  | _||_|  ||_| _| (line 3)
                              (line 4)
      _  _  _  _  _  _     _  (line 5)
  |_||_|| ||_||_   |  |  ||_  (line 6)
    | _||_||_||_|  |  |  | _| (line 7)
                              (line 8)
Invoice number format:

Each invoice number is constructed of 9 digits [0..9]
Invoice number is written using ‘_’ and ‘|’ characters.
Invoice number input takes 4 lines.
The first 3 lines contain 27 characters.
The fourth line is blank.
Note: You can use input_user_story_1.txt to feed your program.

Output:

A text file with the parsed invoice numbers. One number per row.

Example:

  123456789
  490867715
Note: You can use output_user_story_1.txt to test that the output file generated by your program is correct.

User Story 2 - Illegal column

Typing in invoices proved rather tedious for our hapless employee, so it is no wonder he had the occasional typo. We need to track these errors, and you're just the man for the job. Extend the functionality implemented in the previous user story to handle illegal digits. Replace the illegal digits with a ? and add a second column indicator ILLEGAL.

Input:

Same as above, but in this case there might be invoices with illegal digits.

Example:

      _  _     _  _  _  _  _  (line 1)
    | _| _||_||_ |_   ||_||_| (line 2)
    ||_  _|  | _||_|  ||_| _| (line 3)
                              (line 4)
      _  _  _  _  _  _     _  (line 5)
  |_||_|| ||_||    |  |  ||_  (line 6)
    | _||_||_||_|  |     | _| (line 7)
                              (line 8)
Note: You can use input_user_story_2.txt to feed your program.

Output:

A text file with the parsed invoice numbers. One invoice per row.

Example:

  123456789
  4908?7?15 ILLEGAL
Note: You can use output_user_story_2.txt to test that the output file generated by your program is correct.